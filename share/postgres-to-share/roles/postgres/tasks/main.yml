---
- name: Ensure apt cache is up to date
  apt: 
    update_cache: yes

- name: Ensure OS packages are installed
  apt: 
    name: "{{ item }}"
  loop:
    - software-properties-common
    - acl
    - libpq-dev
    - postgresql
    - postgresql-plpython3
    - python3-pip
    - python3-dev
    - gcc

- name: Ensure pip packages are installed
  pip:
    name: "{{ item }}"
  loop:
    - gql
    - psycopg2

- name: Ensure Postgres service is running
  service:
    name: postgresql
    state: started
    enabled: yes

- name: Ensure database is created
  become_user: postgres
  postgresql_db:
    name: "{{ dbname }}"
    template: 'template0'
    state: present

- name: Enable plpython3u extension
  become_user: postgres
  postgresql_ext:
    name: plpython3u
    db: "{{ dbname }}"

- name: Make plpython3u lantrusted
  become_user: postgres
  postgresql_query:
    db: "{{ dbname }}"
    query: UPDATE pg_language SET lanpltrusted = true WHERE lanname = 'plpython3u'

- name: Create item table
  become_user: postgres
  postgresql_table:
    db: "{{ dbname }}"
    table: "{{ dbtable }}"
    columns:
    - itemname text
    - itemnumber text primary key
    - quantity int
    - lastupdated timestamp

- name: Ensure database user exists
  become_user: postgres
  postgresql_user:
    db: "{{ dbname }}"
    name: "{{ dbuser }}"
    password: "{{ dbpassword }}"
    state: present
    priv: "ALL/item:ALL"

- name: Ensure user does not have unnecessary privileges
  become_user: postgres
  postgresql_user:
    name: "{{ dbuser }}"
    role_attr_flags: NOSUPERUSER,NOCREATEDB
    state: present

- name: Create function add_to_share
  become_user: postgres
  postgresql_query:
    db: "{{ dbname }}"
    query: |
      CREATE OR REPLACE FUNCTION add_to_share()
      RETURNS trigger AS '
        import urllib3

        from gql import gql, Client
        from gql.transport.requests import RequestsHTTPTransport

        urllib3.disable_warnings()

        
        share_node_url = "{{ share_node_url }}"
        share_node_api_key = "{{ share_node_api_key }}"

        transport=RequestsHTTPTransport(
          url=share_node_url,
          use_json=True,
          headers={
            "Content-type": "application/json",
            "x-api-key": share_node_api_key
          },
          verify=False,
          retries=3,
        )

        gql_client = Client(
            transport=transport,
            fetch_schema_from_transport=True,
        )

        # Manipulate last_protected to adhere to
        # JSON Schema date-time format
        lastupdated = TD["new"]["lastupdated"].replace(" ", "T")
        lastupdated = lastupdated.split(".")[0] + "Z"
        
        params = {
          "itemName": TD["new"]["itemname"],
          "itemNumber": TD["new"]["itemnumber"],
          "quantity": TD["new"]["quantity"],
          "lastUpdated": lastupdated
        }

        query = gql(
          """
          mutation addItem(
            $itemName: String!,
            $itemNumber: String!,
            $quantity: Int!,
            $lastUpdated: String!
          ) {
              add_Inventory_async(
                input: {
                  itemName: $itemName,
                  itemNumber: $itemNumber,
                  quantity: $quantity,
                  lastUpdated: $lastUpdated
                }
              ) {
                error
                result {
                  _id
                }
              }
          }
          """
        )

        try:
          result = gql_client.execute(
            query,
            variable_values=params
          )
        except Exception as e:
          raise Exception(str(e))

      ' LANGUAGE plpython3u;

- name: Drop trigger for item inserts if it already exists
  become_user: postgres
  postgresql_query:
    db: "{{ dbname }}"
    query: |
      DROP TRIGGER IF EXISTS add_to_share on {{ dbtable }};

- name: Create trigger for item inserts
  become_user: postgres
  postgresql_query:
    db: "{{ dbname }}"
    query: |
      CREATE TRIGGER add_to_share
        AFTER INSERT ON {{ dbtable }}
        FOR EACH ROW
        EXECUTE FUNCTION add_to_share();

- name: Create function update_in_share
  become_user: postgres
  postgresql_query:
    db: "{{ dbname }}"
    query: |
      CREATE OR REPLACE FUNCTION update_in_share()
      RETURNS trigger AS '
        import urllib3

        from gql import gql, Client
        from gql.transport.requests import RequestsHTTPTransport

        urllib3.disable_warnings()

        
        share_node_url = "{{ share_node_url }}"
        share_node_api_key = "{{ share_node_api_key }}"

        transport=RequestsHTTPTransport(
          url=share_node_url,
          use_json=True,
          headers={
            "Content-type": "application/json",
            "x-api-key": share_node_api_key
          },
          verify=False,
          retries=3,
        )

        gql_client = Client(
            transport=transport,
            fetch_schema_from_transport=True,
        )

        # Manipulate last_protected to adhere to
        # JSON Schema date-time format
        lastupdated = TD["new"]["lastupdated"].replace(" ", "T")
        lastupdated = lastupdated.split(".")[0] + "Z"

        search_params = {
          "itemNumber": TD["new"]["itemnumber"]
        }

        search_query = gql(
          """
          query listItem(
            $itemNumber: String!
          ) {
              list_InventoryItems(
                filter: {
                  itemNumber: {
                    eq: $itemNumber
                  }
                }
              ) {
                _InventoryItems {
                  _id
                }
              }
          }
          """
        )

        try:
          result = gql_client.execute(
            search_query,
            variable_values=search_params
          )
        except Exception as e:
          raise Exception(str(e))
        
        item_id = result["list_InventoryItems"]["_InventoryItems"][0]["_id"]

        # Update the item in Vendia Share
        update_params = {
          "_id": item_id,
          "itemName": TD["new"]["itemname"],
          "itemNumber": TD["new"]["itemnumber"],
          "quantity": TD["new"]["quantity"],
          "lastUpdated": lastupdated
        }

        update_query = gql(
          """
          mutation updateItem(
            $_id: ID!,
            $itemName: String!,
            $itemNumber: String!,
            $quantity: Int!,
            $lastUpdated: String!
          ) {
            put_Inventory_async(
              id: $_id,
              input: {
                itemName: $itemName,
                itemNumber: $itemNumber,
                quantity: $quantity,
                lastUpdated: $lastUpdated
              }
            ) {
              error
              result {
                _id
              }
            }
          }
          """
        )

        try:
          result = gql_client.execute(
            update_query,
            variable_values=update_params
          )
        except Exception as e:
          raise Exception(str(e))

      ' LANGUAGE plpython3u;

- name: Drop trigger for item updates if it already exists
  become: yes
  become_user: postgres
  postgresql_query:
    db: "{{ dbname }}"
    query: |
      DROP TRIGGER IF EXISTS update_in_share on {{ dbtable }};

- name: Create trigger for item updates
  become: yes
  become_user: postgres
  postgresql_query:
    db: "{{ dbname }}"
    query: |
      CREATE TRIGGER update_in_share
        BEFORE UPDATE ON {{ dbtable }}
        FOR EACH ROW
        EXECUTE FUNCTION update_in_share();

- name: Create function remove_from_share
  become: yes
  become_user: postgres
  postgresql_query:
    db: "{{ dbname }}"
    query: |
      CREATE OR REPLACE FUNCTION remove_from_share()
      RETURNS trigger AS '
        import urllib3

        from gql import gql, Client
        from gql.transport.requests import RequestsHTTPTransport

        urllib3.disable_warnings()

        
        share_node_url = "{{ share_node_url }}"
        share_node_api_key = "{{ share_node_api_key }}"

        transport=RequestsHTTPTransport(
          url=share_node_url,
          use_json=True,
          headers={
            "Content-type": "application/json",
            "x-api-key": share_node_api_key
          },
          verify=False,
          retries=3,
        )

        gql_client = Client(
            transport=transport,
            fetch_schema_from_transport=True,
        )

        search_params = {
          "itemNumber": TD["old"]["itemnumber"]
        }

        search_query = gql(
          """
          query listItem(
            $itemNumber: String!
          ) {
              list_InventoryItems(
                filter: {
                  itemNumber: {
                    eq: $itemNumber
                  }
                }
              ) {
                _InventoryItems {
                  _id
                }
              }
          }
          """
        )

        try:
          result = gql_client.execute(
            search_query,
            variable_values=search_params
          )
        except Exception as e:
          raise Exception(str(e))
        
        item_id = result["list_InventoryItems"]["_InventoryItems"][0]["_id"]

        # Remove the item from Vendia Share
        delete_params = {
          "_id": item_id
        }

        delete_query = gql(
          """
          mutation removeItem(
            $_id: ID!
          ) {
            remove_Inventory_async(
              id: $_id
            ) {
              error
              result {
                _id
              }
            }
          }
          """
        )

        try:
          result = gql_client.execute(
            delete_query,
            variable_values=delete_params
          )
        except Exception as e:
          raise Exception(str(e))

      ' LANGUAGE plpython3u;

- name: Drop trigger for item deletions if it already exists
  become_user: postgres
  postgresql_query:
    db: "{{ dbname }}"
    query: |
      DROP TRIGGER IF EXISTS remove_from_share on {{ dbtable }};

- name: Create trigger for item deletions
  become_user: postgres
  postgresql_query:
    db: "{{ dbname }}"
    query: |
      CREATE TRIGGER remove_from_share
        BEFORE DELETE ON {{ dbtable }}
        FOR EACH ROW
        EXECUTE FUNCTION remove_from_share();

- name: Copy item insert script to virtual machine
  copy:
    src: 01-insert-items.sql
    dest:  /home/vagrant/01-insert-items.sql
    owner: vagrant
    group: vagrant
    mode: 0660

- name: Copy item update script to virtual machine
  copy:
    src: 02-update-items.sql
    dest:  /home/vagrant/02-update-items.sql
    owner: vagrant
    group: vagrant
    mode: 0660

- name: Copy item remove script to virtual machine
  copy:
    src: 03-remove-items.sql
    dest:  /home/vagrant/03-remove-items.sql
    owner: vagrant
    group: vagrant
    mode: 0660
  